/*
 * This file is generated by jOOQ.
 */
package eu.fancybrackets.template.jooq.generated.tables;


import eu.fancybrackets.template.jooq.generated.Indexes;
import eu.fancybrackets.template.jooq.generated.Keys;
import eu.fancybrackets.template.jooq.generated.Public;
import eu.fancybrackets.template.jooq.generated.tables.records.MeasurementRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Measurement extends TableImpl<MeasurementRecord> {

    private static final long serialVersionUID = -794706412;

    /**
     * The reference instance of <code>public.measurement</code>
     */
    public static final Measurement MEASUREMENT = new Measurement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeasurementRecord> getRecordType() {
        return MeasurementRecord.class;
    }

    /**
     * The column <code>public.measurement.id</code>.
     */
    public final TableField<MeasurementRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('measurement_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.measurement.container_id</code>.
     */
    public final TableField<MeasurementRecord, String> CONTAINER_ID = createField("container_id", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.measurement.value</code>.
     */
    public final TableField<MeasurementRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.measurement.measure_time</code>.
     */
    public final TableField<MeasurementRecord, Timestamp> MEASURE_TIME = createField("measure_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.measurement</code> table reference
     */
    public Measurement() {
        this(DSL.name("measurement"), null);
    }

    /**
     * Create an aliased <code>public.measurement</code> table reference
     */
    public Measurement(String alias) {
        this(DSL.name(alias), MEASUREMENT);
    }

    /**
     * Create an aliased <code>public.measurement</code> table reference
     */
    public Measurement(Name alias) {
        this(alias, MEASUREMENT);
    }

    private Measurement(Name alias, Table<MeasurementRecord> aliased) {
        this(alias, aliased, null);
    }

    private Measurement(Name alias, Table<MeasurementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Measurement(Table<O> child, ForeignKey<O, MeasurementRecord> key) {
        super(child, key, MEASUREMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEASUREMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MeasurementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEASUREMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MeasurementRecord> getPrimaryKey() {
        return Keys.MEASUREMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MeasurementRecord>> getKeys() {
        return Arrays.<UniqueKey<MeasurementRecord>>asList(Keys.MEASUREMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Measurement as(String alias) {
        return new Measurement(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Measurement as(Name alias) {
        return new Measurement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(String name) {
        return new Measurement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Measurement rename(Name name) {
        return new Measurement(name, null);
    }
}
