/*
 * This file is generated by jOOQ.
 */
package eu.fancybrackets.template.jooq.generated.tables.records;


import eu.fancybrackets.template.jooq.generated.tables.Measurement;

import java.sql.Timestamp;

import javax.annotation..Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeasurementRecord extends UpdatableRecordImpl<MeasurementRecord> implements Record4<Integer, String, String, Timestamp> {

    private static final long serialVersionUID = -70238934;

    /**
     * Setter for <code>public.measurement.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.measurement.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.measurement.container_id</code>.
     */
    public void setContainerId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.measurement.container_id</code>.
     */
    public String getContainerId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.measurement.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.measurement.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.measurement.measure_time</code>.
     */
    public void setMeasureTime(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.measurement.measure_time</code>.
     */
    public Timestamp getMeasureTime() {
        return (Timestamp) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Timestamp> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Measurement.MEASUREMENT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Measurement.MEASUREMENT.CONTAINER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Measurement.MEASUREMENT.VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return Measurement.MEASUREMENT.MEASURE_TIME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getContainerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component4() {
        return getMeasureTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getContainerId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getMeasureTime();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementRecord value2(String value) {
        setContainerId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementRecord value3(String value) {
        setValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementRecord value4(Timestamp value) {
        setMeasureTime(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MeasurementRecord values(Integer value1, String value2, String value3, Timestamp value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MeasurementRecord
     */
    public MeasurementRecord() {
        super(Measurement.MEASUREMENT);
    }

    /**
     * Create a detached, initialised MeasurementRecord
     */
    public MeasurementRecord(Integer id, String containerId, String value, Timestamp measureTime) {
        super(Measurement.MEASUREMENT);

        set(0, id);
        set(1, containerId);
        set(2, value);
        set(3, measureTime);
    }
}
